const Book = require("../models/Book");
const User = require('../models/User');
const path = require('path'); // Th√™m import module path
const PDFParse = require('pdf-parse'); // ƒê·∫£m b·∫£o ƒë√£ c√†i ƒë·∫∑t pdf-parse
const fs = require('fs');


// =============================
// üìã L·∫•y danh s√°ch s√°ch pending cho admin
// =============================

// Trong adminController.js, h√†m getPendingBooks
exports.getPendingBooks = async (req, res) => {
  try {
    const { page = 1, limit = 10 } = req.query;
    const skip = (page - 1) * parseInt(limit);

    const pendingBooks = await Book.find({ status: "pending" })
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit))
      .populate("uploadedBy", "name email");

    // TH√äM DEBUG: Log ƒë·ªÉ ki·ªÉm tra
    console.log('üîç S·ªë s√°ch pending t√¨m th·∫•y:', pendingBooks.length);
    console.log('üìö Chi ti·∫øt query:', { status: "pending", skip, limit });
    console.log('üìä T·ªïng s√°ch pending:', await Book.countDocuments({ status: "pending" }));

    const total = await Book.countDocuments({ status: "pending" });
    const totalPages = Math.ceil(total / parseInt(limit));

    res.render("admin/pending-books", {
      books: pendingBooks,
      currentPage: parseInt(page),
      totalPages,
      limit: parseInt(limit),
    });
  } catch (err) {
    console.error("L·ªói getPendingBooks:", err);
    req.flash("error", "L·ªói t·∫£i danh s√°ch s√°ch ch·ªù duy·ªát!");
    res.redirect("/admin");
  }
};
//
exports.getPendingBookDetail = async (req, res) => {
  try {
    const { id } = req.params;

    // T√¨m s√°ch v·ªõi populate uploadedBy
    const book = await Book.findOne({ _id: id, status: 'pending' }).populate('uploadedBy', 'name email');
    if (!book) {
      req.flash('error', 'Kh√¥ng t√¨m th·∫•y s√°ch ho·∫∑c s√°ch kh√¥ng ƒëang ch·ªù ph√™ duy·ªát!');
      return res.redirect('/admin');
    }

    let fileContent = '';

    // 1. X·ª≠ l√Ω file n·∫øu c√≥ fileUrl
    if (book.fileUrl) {
      // Chu·∫©n h√≥a fileUrl: lo·∫°i b·ªè ho√†n to√†n ti·ªÅn t·ªë '/uploads/' ho·∫∑c 'uploads/'
      const fileName = book.fileUrl.replace(/^(?:\/)?(?:uploads\/)?/, '').replace(/^\/+/, '');
      const filePath = path.join(process.cwd(), 'Uploads', fileName);
      console.log('üîç Ki·ªÉm tra book.fileUrl:', book.fileUrl); // Debug fileUrl g·ªëc
      console.log('üîç Ki·ªÉm tra fileName:', fileName); // Debug t√™n file sau khi x·ª≠ l√Ω
      console.log('üîç Ki·ªÉm tra filePath:', filePath); // Debug ƒë∆∞·ªùng d·∫´n file
      console.log('üîç Th∆∞ m·ª•c g·ªëc d·ª± √°n:', process.cwd()); // Debug th∆∞ m·ª•c g·ªëc

      try {
        if (fs.existsSync(filePath)) {
          console.log('‚úÖ File t·ªìn t·∫°i t·∫°i:', filePath);
          if (book.fileUrl.endsWith('.pdf')) {
            const dataBuffer = fs.readFileSync(filePath);
            const data = await PDFParse(dataBuffer, { max: 10 }); // Gi·ªõi h·∫°n 10 trang
            fileContent = data.text
              .replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;')
              .replace(/\r?\n/g, '<br>')
              .replace(/<br>\s*<br>/g, '<br><br>');
          } else if (book.fileUrl.endsWith('.txt')) {
            let rawContent = fs.readFileSync(filePath, 'utf8');
            // L√†m s·∫°ch TXT n·∫øu c·∫ßn (Project Gutenberg)
            const cleanStart = rawContent.indexOf('*** START OF THE PROJECT GUTENBERG EBOOK');
            if (cleanStart !== -1) {
              rawContent = rawContent.substring(cleanStart);
              const cleanEnd = rawContent.lastIndexOf('*** END OF THE PROJECT GUTENBERG EBOOK');
              if (cleanEnd !== -1) {
                rawContent = rawContent.substring(0, cleanEnd);
              }
              rawContent = rawContent.replace(/[\*\_\-]{3,}.*?[\*\_\-]{3,}/gs, '').trim();
            }
            fileContent = rawContent
              .replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;')
              .replace(/\r?\n/g, '<br>')
              .replace(/<br>\s*<br>/g, '<br><br>');
          } else {
            console.warn('‚ö†Ô∏è File kh√¥ng h·ªó tr·ª£:', fileName);
            fileContent = `<div class="alert alert-warning">File kh√¥ng h·ªó tr·ª£ (ch·ªâ PDF/TXT). Vui l√≤ng t·∫£i file g·ªëc ƒë·ªÉ xem: <a href="/Uploads/${fileName}" target="_blank">T·∫£i file</a></div>`;
          }
        } else {
          console.warn('‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i t·∫°i:', filePath);
          fileContent = `<div class="alert alert-warning">File kh√¥ng t·ªìn t·∫°i tr√™n server: ${fileName}. Vui l√≤ng ki·ªÉm tra upload ho·∫∑c t·∫£i file g·ªëc: <a href="/Uploads/${fileName}" target="_blank">T·∫£i file</a></div>`;
        }
      } catch (fileErr) {
        console.error('‚ö†Ô∏è L·ªói x·ª≠ l√Ω file:', fileErr.message);
        fileContent = `<div class="alert alert-danger">L·ªói ƒë·ªçc file: ${fileErr.message}. Vui l√≤ng t·∫£i file g·ªëc ƒë·ªÉ xem: <a href="/Uploads/${fileName}" target="_blank">T·∫£i file</a></div>`;
      }
    } else {
      console.log('üîç Kh√¥ng c√≥ fileUrl, ki·ªÉm tra content/description');
    }

    // 2. Fallback: N·∫øu kh√¥ng c√≥ file ho·∫∑c l·ªói, d√πng book.content ho·∫∑c book.description
    if (!fileContent || fileContent.includes('alert')) {
      if (book.content && book.content.trim() !== '') {
        console.log('‚úÖ S·ª≠ d·ª•ng book.content');
        fileContent = book.content
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/\r?\n/g, '<br>')
          .replace(/<br>\s*<br>/g, '<br><br>');
      } else if (book.description && book.description.trim() !== '') {
        console.log('‚úÖ S·ª≠ d·ª•ng book.description');
        fileContent = book.description
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/\r?\n/g, '<br>')
          .replace(/<br>\s*<br>/g, '<br><br>');
      } else {
        console.warn('‚ö†Ô∏è Kh√¥ng c√≥ n·ªôi dung text ho·∫∑c file');
        fileContent = `<div class="alert alert-info">Kh√¥ng c√≥ n·ªôi dung text ho·∫∑c file ƒë·ªÉ hi·ªÉn th·ªã. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu upload.</div>`;
      }
    }

    console.log('üîç N·ªôi dung hi·ªÉn th·ªã cho s√°ch', book.title, ':', fileContent.substring(0, 50) + '...');

    // Render view
    res.render('books/detail', {
      book,
      fileContent,
      user: req.session.user,
    });
  } catch (err) {
    console.error('L·ªói getPendingBookDetail:', err.message);
    req.flash('error', 'L·ªói t·∫£i chi ti·∫øt s√°ch: ' + err.message);
    res.redirect('/admin');
  }
};
// =============================
// ‚úÖ Duy·ªát s√°ch
// =============================
exports.approveBook = async (req, res) => {
  try {
    const { id } = req.params;
    const book = await Book.findById(id);

    if (!book || book.status !== "pending") {
      req.flash("error", "S√°ch kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!");
      return res.redirect("/admin");
    }

    // Th√™m category "Handwritten Books" n·∫øu ch∆∞a c√≥
    if (!book.category.includes("Handwritten Books")) {
      book.category.push("Handwritten Books");
    }

    book.status = "published";
    await book.save();

    req.flash("success", `ƒê√£ duy·ªát s√°ch: "${book.title}"`);
    res.redirect("/admin");
  } catch (err) {
    console.error("L·ªói approveBook:", err);
    req.flash("error", "L·ªói duy·ªát s√°ch!");
    res.redirect("/admin");
  }
};

// =============================
// ‚ùå T·ª´ ch·ªëi s√°ch
// =============================
exports.rejectBook = async (req, res) => {
  try {
    const { id } = req.params;
    const book = await Book.findById(id);

    if (!book || book.status !== "pending") {
      req.flash("error", "S√°ch kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!");
      return res.redirect("/admin");
    }

    book.status = "rejected";
    await book.save();

    req.flash("error", `ƒê√£ t·ª´ ch·ªëi s√°ch: "${book.title}"`);  // C√≥ th·ªÉ g·ª≠i email notify user sau
    res.redirect("/admin");
  } catch (err) {
    console.error("L·ªói rejectBook:", err);
    req.flash("error", "L·ªói t·ª´ ch·ªëi s√°ch!");
    res.redirect("/admin");
  }
};


// L·∫•y danh s√°ch t√†i kho·∫£n
exports.getUsers = async (req, res) => {
  try {
    const { page = 1, limit = 10 } = req.query;
    const skip = (page - 1) * parseInt(limit);

    const users = await User.find()
      .sort({ lastLogin: -1 }) // S·∫Øp x·∫øp theo th·ªùi gian ƒëƒÉng nh·∫≠p g·∫ßn nh·∫•t
      .skip(skip)
      .limit(parseInt(limit));

    const total = await User.countDocuments();
    const totalPages = Math.ceil(total / parseInt(limit));

    console.log('üîç S·ªë t√†i kho·∫£n t√¨m th·∫•y:', users.length);
    console.log('üìö Chi ti·∫øt query:', { skip, limit });
    console.log('üìä T·ªïng t√†i kho·∫£n:', total);

    res.render('admin/users', {
      users,
      currentPage: parseInt(page),
      totalPages,
      limit: parseInt(limit),
    });
  } catch (err) {
    console.error('L·ªói getUsers:', err);
    req.flash('error', 'L·ªói t·∫£i danh s√°ch t√†i kho·∫£n!');
    res.redirect('/admin');
  }
};

// X√≥a t√†i kho·∫£n
exports.deleteUser = async (req, res) => {
  try {
    const { id } = req.params;
    const user = await User.findById(id);

    if (!user) {
      req.flash('error', 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!');
      return res.redirect('/admin/users');
    }

    // Ki·ªÉm tra n·∫øu user l√† admin (ngƒÉn x√≥a admin ch√≠nh)
    if (user.role === 'admin') {
      req.flash('error', 'Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n admin!');
      return res.redirect('/admin/users');
    }

    // X√≥a t·∫•t c·∫£ s√°ch c·ªßa user (n·∫øu c·∫ßn)
    await Book.deleteMany({ uploadedBy: id });

    // X√≥a t√†i kho·∫£n
    await User.findByIdAndDelete(id);

    req.flash('success', `ƒê√£ x√≥a t√†i kho·∫£n: "${user.email}"`);
    res.redirect('/admin/users');
  } catch (err) {
    console.error('L·ªói deleteUser:', err);
    req.flash('error', 'L·ªói x√≥a t√†i kho·∫£n!');
    res.redirect('/admin/users');
  }
};